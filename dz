#!/bin/bash

# ip [id] - Prints out a container's name, IPs, ports, networks and gateways. If no id or name provided, prints info for all containers.
function dz.ip() {
    _print_container_info() {
        container_ports="$(docker container inspect --format='{{range $p, $conf := .NetworkSettings.Ports}}{{if $conf}}{{if ne (index $conf 0).HostIp "0.0.0.0"}}{{(index $conf 0).HostIp}}:{{end}}{{(index $conf 0).HostPort}}{{else}}null{{end}}:{{$p}} {{end}}' "${1}")"
        container_id="$(docker container inspect --format "{{.ID}}" "${1}")"
        container_name="$(docker container inspect --format "{{ .Name }}" "${1}" | sed 's/\///')"
        container_ip="$(docker container inspect --format "{{range .NetworkSettings.Networks}}{{.IPAddress}}  {{end}}" "${1}")"
        container_network=($(docker container inspect --format "{{range \$k, \$v := .NetworkSettings.Networks}}{{printf \"%s\n\" \$k}}{{end}}" "${1}"))
        container_gateway="$(docker container inspect --format "{{range .NetworkSettings.Networks}}{{.Gateway}} {{end}}" "${1}")"

        echo "${container_id:0:12}","$container_name","$container_ip","$container_ports","${container_network[*]}","$container_gateway" >>/tmp/dz.ip.txt
    }

    echo "Container Id,Container Name,Container IPs,Container Ports,Container Networks,Container Gateways" >/tmp/dz.ip.txt
    if [ -z "${1}" ]; then
        local container_id
        docker ps -q | while read -r container_id; do
            _print_container_info "$container_id"
        done
    else
        # only calls _print_container_info if passed param exits (ID or Name)
        docker container ls --format "{{.ID}} {{.Names}}" | grep -q "\b${1}" && _print_container_info "${1}"
    fi

    column -s "," -t /tmp/dz.ip.txt
    rm /tmp/dz.ip.txt
}

# net [id] - Prints out a networks's name, IPs and gateways. If no id or name provided, prints info for all networks.
function dz.net() {
    _print_network_info() {
        network_name="$(docker network inspect --format "{{.Name}}" "${1}" | sed 's/\///')"
        network_id="$(docker network inspect --format "{{.ID}}" "${1}")"
        network_subnets="$(docker network inspect --format "{{range .IPAM.Config}}{{.Subnet}}{{end}}" "${1}")"
        network_gateways="$(docker network inspect --format "{{range .IPAM.Config}}{{.Gateway}}{{end}}" "${1}")"

        echo "${network_id:0:12}","$network_name","$network_subnets","$network_gateways" >>/tmp/dz.net.txt
    }

    echo "Network ID,Network Name,Network Subnet,Network Gateway" >/tmp/dz.net.txt

    if [ -z "${1}" ]; then
        local network_id
        docker network ls --format "{{.ID}}" | while read -r network_id; do
            _print_network_info "$network_id"
        done
    else
        # only calls _print_network_info if passed param exits
        docker network ls --format "{{.ID}} {{.Name}}" | grep -q "\b${1}" && _print_network_info "${1}"
    fi

    column -s "," -t /tmp/dz.net.txt

    rm -r /tmp/dz.net.txt
}

# sh [id] - Attach a shell to a docker with an id
function dz.sh() {
    if [ -z $2 ]; then
        docker exec -it $1 /bin/sh -c "[ -e /bin/bash ] && /bin/bash || /bin/sh"
    else
        docker exec -u $1 -it $2 /bin/sh -c "[ -e /bin/bash ] && /bin/bash || /bin/sh"
    fi
}

function dz.logs() {
    if [ -z $2 ]; then
        docker logs -fn 0 $1
    else
        docker logs -fn $1 $2
    fi
}

function dz.v() {
    if [ -z $1 ]; then
        docker volume ls -f dangling=true --format '{{ .Mountpoint }}' | sudo xargs -L1 du -sh
    elif [ $1 == "all" ]; then
        docker volume ls --format '{{ .Mountpoint }}' | sudo xargs -L1 du -sh
    else
        docker volume ls -f $1 --format '{{ .Mountpoint }}' | sudo xargs -L1 du -sh
    fi
}

function dz.help() {
    if [ "$(type -t dz.$1)" == "function" ]; then
        declare -f "dz.$1" | sed '1,2d;$d' | sed -e "s/^    //"
    else
        echo "ez docker"
        echo "==== COMMANDS ========="
        echo "dz                        runs 'dz ip' command"
        echo "dz ip [ID]                print a container's name, IPs, ports, networks and gateways (all containers if blank)"
        echo "dz net [ID]               print a networks's name, IPs and gateways (all networks if blank)"
        echo "dz v [filter]             prints volumes with sizes (dangling if blank, all if 'all')"
        echo "dz sh [USERNAME] <ID>     bash into a container with optional username"
        echo "dz logs [NUM_LINES] <ID>  tail (and follow) a container's logs (0 lines if blank)"
    fi
}

if [ "$(type -t dz.$1)" == "function" ]; then
    "dz.$@"
elif [ "$1" == "-h" ]; then
    dz.help
elif [ -z "$1" ]; then
    dz.ip
fi
